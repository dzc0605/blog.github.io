(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{202:function(t,s,a){t.exports=a.p+"assets/img/pic_type.f205c34f.jpg"},215:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"内置类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 内置类型")]),t._v(" "),n("p",[t._v("JS 中分为七种内置类型，七种内置类型又分为两大类型：基本类型和引用类型（Object）。")]),t._v(" "),n("h3",{attrs:{id:"基本类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),n("p",[t._v("基本类型有六种： "),n("code",[t._v("null")]),t._v("，"),n("code",[t._v("undefined")]),t._v("，"),n("code",[t._v("boolean")]),t._v("，"),n("code",[t._v("number")]),t._v("，"),n("code",[t._v("string")]),t._v("，和es6新增的 "),n("code",[t._v("symbol")]),t._v("。\n基本类型是保存在栈内存中的简单数据段，它的值是不可变的，除非重新赋值\n其中 JS 的数字类型是浮点类型的，没有整型。并且浮点类型基于 IEEE 754标准实现，在使用中会遇到某些 Bug 例如 "),n("code",[t._v("0.1+0.2 !==0.3")]),t._v(" 。"),n("code",[t._v("NaN")]),t._v(" 也属于 "),n("code",[t._v("number")]),t._v(" 类型，并且 "),n("code",[t._v("NaN")]),t._v(" 不等于自身。")]),t._v(" "),n("p",[t._v("对于基本类型来说，如果使用字面量的方式，那么这个变量只是个字面量，只有在必要的时候才会转换为对应的类型。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这只是字面量，不是 number 类型")]),t._v("\na"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用时候才会转换为对象类型")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基本类型可以用 `typeof()` 判断，但是并不准确，")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"object"')]),t._v("\n")])])]),n("h3",{attrs:{id:"引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用类型")]),t._v(" "),n("p",[t._v("引用类型（Object）常见的有： "),n("code",[t._v("Object")]),t._v("，"),n("code",[t._v("Array")]),t._v("，"),n("code",[t._v("Function")]),t._v("\n引用类型的值是同时保存在栈内存和堆内存中的对象，栈内存中存储的是一个指向，它的值是可变的，在使用过程中会遇到浅拷贝和深拷贝的问题。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'FE'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\nb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EF'")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EF")]),t._v("\n")])])]),n("h3",{attrs:{id:"类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),n("h4",{attrs:{id:"转boolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转boolean","aria-hidden":"true"}},[t._v("#")]),t._v(" 转Boolean")]),t._v(" "),n("p",[t._v("在条件判断时，除了 "),n("code",[t._v("undefined")]),t._v("， "),n("code",[t._v("null")]),t._v("， "),n("code",[t._v("false")]),t._v("， "),n("code",[t._v("NaN")]),t._v("， "),n("code",[t._v("''")]),t._v("， "),n("code",[t._v("0")]),t._v("， "),n("code",[t._v("-0")]),t._v("，其他所有值都转为 "),n("code",[t._v("true")]),t._v("，包括所有对象。")]),t._v(" "),n("h4",{attrs:{id:"对象转基本类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象转基本类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象转基本类型")]),t._v(" "),n("p",[t._v("对象在转换基本类型时，首先会调用 "),n("code",[t._v("valueOf")]),t._v(" 然后调用 "),n("code",[t._v("toString")]),t._v("。并且这两个方法你是可以重写的。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("当然你也可以重写 "),n("code",[t._v("Symbol.toPrimitive")]),t._v(" ，该方法在转基本类型时调用优先级最高。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 3")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '12'")]),t._v("\n")])])]),n("h4",{attrs:{id:"四则运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四则运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 四则运算符")]),t._v(" "),n("p",[t._v("只有当加法运算时，其中一方是字符串类型，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。并且加法运算会触发三种类型转换：将值转换为原始值，转换为数字，转换为字符串。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '11'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1,22,1'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2].toString() -> '1,2'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [2, 1].toString() -> '2,1'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1,2' + '2,1' = '1,22,1'")]),t._v("\n")])])]),n("p",[t._v("对于加号需要注意这个表达式 "),n("code",[t._v("'a' + + 'b'")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// -> "aNaN"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为 + 'b' -> NaN")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 你也许在一些代码中看到过 + '1' -> 1")]),t._v("\n")])])]),n("h4",{attrs:{id:"操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操作符","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("code",[t._v("==")]),t._v(" 操作符")]),t._v(" "),n("p",[n("img",{attrs:{src:a(202),alt:""}}),t._v("\n上图中的 "),n("code",[t._v("toPrimitive")]),t._v(" 就是对象转基本类型。")]),t._v(" "),n("p",[t._v("这里来解析一道题目 "),n("code",[t._v("[] == ![] // -> true")]),t._v(" ，下面是这个表达式为何为 "),n("code",[t._v("true")]),t._v(" 的步骤")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [] 转成 true，然后取反变成 false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据第 8 条得出")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToNumber")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据第 10 条得出")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToPrimitive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [].toString() -> ''")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据第 6 条得出")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> true")]),t._v("\n")])])]),n("h4",{attrs:{id:"比较运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),n("ol",[n("li",[t._v("如果是对象，就通过 "),n("code",[t._v("toPrimitive")]),t._v(" 转换对象")]),t._v(" "),n("li",[t._v("如果是字符串，就通过 "),n("code",[t._v("unicode")]),t._v(" 字符索引来比较")])])])},[],!1,null,null,null);s.default=e.exports}}]);